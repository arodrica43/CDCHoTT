{-# OPTIONS --cubical --rewriting #-}

module CDCHoTT.Experimental.SDG where

open import Cubical.Foundations.Everything
open import Cubical.Data.Prod.Base


open import Cubical.Data.Int renaming (_+_ to _+′_
                                      ; -_ to -′_)

open import Cubical.Data.Nat public  renaming (_+_ to _+″_)
open import Cubical.Data.Nat.Order                                                                         


postulate
  Line : Set
  _+_ : Line → Line → Line
  _*_ : Line → Line → Line
  -_ : Line → Line
  0' : Line
  1' : Line

infixl 7 _*_
infixl 6 _+_

postulate
  +-identityˡ : ∀ x → 0' + x ≡ x 
  +-identityʳ : ∀ x → x + 0' ≡ x
  +-associat : ∀ x y z → x + (y + z) ≡ x + y + z
  neg-inverseˡ : ∀ x → (- x) + x ≡ 0'
  neg-inverseʳ : ∀ x → x + (- x) ≡ 0'
  +-commut : ∀ x y → x + y ≡ y + x
  *-identityˡ : ∀ x → 1' * x ≡ x
  *-identityʳ : ∀ x → x * 1' ≡ x 
  *-assoc : ∀ x y z → x * (y * z) ≡ x * y * z
  *-comm : ∀ x y → x * y ≡ y * x
  distribˡ : ∀ x y z → x * (y + z) ≡ x * y + x * z
  distribʳ : ∀ x y z → (y + z) * x ≡ y * x + z * x
  zeroˡ : ∀ x → 0' * x ≡ 0'
  zeroʳ : ∀ x → x * 0' ≡ 0'

-- Infinitesimal object are zero locus of polynomials on infinitesimal variables

_^_ : Line → ℕ → Line
x ^ zero = 1'
x ^ (suc n) = x ^ n

data 𝟙 : Set where
  ∗ : 𝟙

e : 𝟙 → Line
e ∗ = 0'

Line^ : ℕ → Set
Line^ zero = 𝟙
Line^ (suc n) = Line × Line^ n

_^^_ : Set → ℕ → Set
X ^^ zero = 𝟙
X ^^ (suc n) = X × X ^^ n

ℕ_ : ℕ → Set
ℕ_ n = Σ ℕ λ m → m < n

π : {n : ℕ} {X : Set}{z : X} → (k : ℕ_ n) → (x : X ^^ n) → X
π {n = zero} {z = z} m x = z
π {n = (suc n)} m x = proj₁ x

D : ℕ → Set
D n = Σ Line λ x → x ^ n ≡ 0'

D[_] : ℕ → Set
D[ n ] = Σ (Line ^^ n) λ x → ∀ {i j : ℕ_ n} → (π {n} {Line} {0'} i x) * (π {n} {Line} {0'} j x) ≡ 0'

-- KL axiom for the infinitesimal interval

ι : {n : ℕ} → D n → Line
ι (x , p) = x

canonical-map : Line^ 2 → (D 1 → Line)
canonical-map (x , (y , _)) = λ ε → x + (y * (ι {1} ε))

postulate
  KL-axiom : isIso canonical-map

fundamental-canonical-map : ∀ {n} → Line^ (suc n) → (D n → Line)
fundamental-canonical-map {n = zero} (x , y) = λ ε → x -- λ ε → x + (y * (ι {n} ε))
fundamental-canonical-map {n = suc n} (x , y) = λ ε → x + (fundamental-canonical-map {n} y ε * (ι {suc n} ε)) -- λ ε → x + (y * (ι {n} ε))

postulate
  fundamental-KL-axiom : ∀ {n} → isIso (fundamental-canonical-map {n})
  
Poly : ∀ {n} → Set
Poly {n} = Line ^^ n → Line

locus : ∀ {n} → Poly {n} → Line ^^ n → Set
locus {n} p = λ x → p x ≡ 0'

Locus : ∀ {n} → Poly {n} → Set
Locus {n} p = Σ (Line ^^ n) (locus p)

nil-poly : ∀ {n} → (m : ℕ ^^ n) → Poly {n}
nil-poly {n = zero}  m x = 0'
nil-poly {suc n} (r , s) (x , y) = (x ^ r) * (nil-poly {n} s y)

inf-obj : ∀ {n m} → (s : ℕ ^^ n) → (P : (Poly {n}) ^^ m ) → Set
inf-obj {n = zero} {m = zero} s P = 𝟙 -- 0'
inf-obj {n = zero} {m = (suc m)} s P = 𝟙 -- 0'
inf-obj {n = (suc n)} {m = zero} (s , r) P = Σ Line λ x → inf-obj {n} {zero} r P × (nil-poly {1} (s , ∗) (x , ∗) ≡ 0')
inf-obj {n = (suc n)} {m = (suc m)} s (p , q) = Σ (Line ^^ (suc n)) λ x → (inf-obj {suc n} {m} s q) × (p x ≡ 0')

satisfy-poly-system : ∀ {n m} → (Poly {n}) ^^ m → Line ^^ n → Set
satisfy-poly-system {zero} {zero} S x = 𝟙
satisfy-poly-system {suc n} {zero} S x = 𝟙
satisfy-poly-system {n} {suc m} (p , S) x = (p x ≡ 0') × satisfy-poly-system {n} {m} S x

satisfy-poly-system-compwise : ∀ {n} → (Poly {1}) ^^ n → Line ^^ n → Set
satisfy-poly-system-compwise {zero} S x = 𝟙
satisfy-poly-system-compwise {suc n} (p , S) (x , X) = (p ((x , ∗)) ≡ 0') × satisfy-poly-system-compwise {n} S X

--free-term : ∀ {n} → ℕ ^^ n → Line ^^ n → Line
--free-term {zero} I x = 0'
--free-term {suc n} (k , I) (x , Y) = (x ^ k) * free-term I Y

--satisfy-nilpotency : ∀ {n} → ℕ ^^ n → Line ^^ n → Set
--satisfy-nilpotency {n} I x = free-term I x ≡ 0'

nilpotency-system : ∀ {m} → (ℕ ^^ m) → Poly {1} ^^ m
nilpotency-system {zero} k = ∗
nilpotency-system {suc m} (k , I) =  (λ x → (proj₁ x) ^ k) , nilpotency-system I

satisfy-nilpotency : ∀ {n} → (I : ℕ ^^ n) → Line ^^ n → Set
satisfy-nilpotency I x = satisfy-poly-system-compwise (nilpotency-system I) x

-- General infinitesimal objects InfObj as subsets of R^n generated by polynomials and nilpotency conditions

InfObj : ∀ {n m} → (I : ℕ ^^ n) → (P : (Poly {n}) ^^ m ) → Set
InfObj {n} {m} I P = Σ (Line ^^ n) λ x → (satisfy-poly-system P x) × satisfy-nilpotency I x



--inf-obj-as-subset : ∀ {n m}{s :  ℕ ^^ n}{P : (Poly {n}) ^^ m } → (C : inf-obj {n} {m} s P) → Set
--inf-obj-as-subset {n} C = Σ {!Line ^^ zero!} {!!} 


--general-canonical-map : ∀ {n m}{s :  ℕ ^^ n}{P : (Poly {n}) ^^ m }{C : inf-obj {n} {m} s P} → Line^ (suc n) → (D n → Line)
--general-canonical-map {n = zero} (x , y) = λ ε → x -- λ ε → x + (y * (ι {n} ε))
--general-canonical-map {n = suc n} (x , y) = λ ε → x + (fundamental-canonical-map {n} y ε * (ι {suc n} ε)) -- λ ε → x + (y * (ι {n} ε))


